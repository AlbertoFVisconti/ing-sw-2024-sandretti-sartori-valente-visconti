package it.polimi.ingsw.view;

import it.polimi.ingsw.controller.GameStatus;
import it.polimi.ingsw.controller.TurnStatus;
import it.polimi.ingsw.events.messages.server.*;
import it.polimi.ingsw.model.ScoreBoard;
import it.polimi.ingsw.model.cards.CardSlot;
import it.polimi.ingsw.model.cards.PlayCard;
import it.polimi.ingsw.model.cards.StartCard;
import it.polimi.ingsw.model.cards.corners.Resource;
import it.polimi.ingsw.model.chat.ChatMessage;
import it.polimi.ingsw.model.goals.Goal;
import it.polimi.ingsw.model.player.PlayerColor;
import it.polimi.ingsw.model.saving.ClientGameSaving;
import it.polimi.ingsw.network.Client;
import it.polimi.ingsw.network.rmi.VirtualController;
import it.polimi.ingsw.network.serverhandlers.RMIServerHandler;
import it.polimi.ingsw.network.serverhandlers.ServerHandler;
import it.polimi.ingsw.utils.CardLocation;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Set;

/**
 * Client-side remote object that receive Remote Method Invocations from the Server
 * and "transform" them into messages that will be processed by the actual View (View) asynchronously.
 */
public class ViewWrapper extends UnicastRemoteObject implements VirtualView {
    // wrapper view
    View view;

    /**
     * Builds a new ViewWrapper remote object that wraps the provided view.
     *
     * @param view the View that needs to be wrapped. Usually the local View is unique.
     * @throws RemoteException if an error occurs during remote communication
     */
    public ViewWrapper(View view) throws RemoteException {
        super();
        this.view = view;
    }

    /**
     * Provides (synchronously) a reference to the remote VirtualController Object
     * that allows the user to play the game. The provided VirtualController will be
     * handled by the ServerHandler (RMIServerHandler) and used to send messages.
     *
     * @param controller a remove object that the player can use to play the game
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setController(VirtualController controller) throws RemoteException {
        ServerHandler serverHandler = Client.getInstance().getServerHandler();
        if (serverHandler instanceof RMIServerHandler)
            ((RMIServerHandler) serverHandler).setController(controller);
    }

    /**
     * Asynchronously sets the identifier of the local player.
     * The player identifier encapsulated into each outbound message in order
     * for the server to recognize the sender. The identifier is mandatory for most messages.
     *
     * @param playerIdentifier the playerIdentifier generated by the server for this client
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setPlayerIdentifier(String playerIdentifier) throws RemoteException {
        view.forwardMessage(new ConnectionConfirmationMessage(playerIdentifier));
    }

    /**
     * Asynchronously sets the starting card for the local player.
     *
     * @param card the StartCard object representing the player starting card.
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setStartingCard(StartCard card) throws RemoteException {
        view.forwardMessage(new StartCardUpdateMessage(card));
    }

    /**
     * Asynchronously sets the common goals for the game that is currently
     * being played by the local player.
     *
     * @param goals a list of Goal objects that represents the public goals for the current game.
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setCommonGoals(Goal[] goals) throws RemoteException {
        view.forwardMessage(new CommonGoalsUpdateMessage(goals));
    }

    /**
     * Asynchronously sets the list of available goals for the player to choose
     * in order to obtain the definitive private goal.
     *
     * @param goals a list of Goal object that represents the available private goals.
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setAvailablePrivateGoals(Goal[] goals) throws RemoteException {
        view.forwardMessage(new PrivateGoalUpdateMessage(goals));
    }

    /**
     * Asynchronously sets the local player's definitive goal.
     *
     * @param goal the Goal object representing the player definitive private Goal.
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setDefinitivePrivateGoal(Goal goal) throws RemoteException {
        view.forwardMessage(new PrivateGoalUpdateMessage(goal));
    }

    /**
     * Asynchronously sets one of the local player's cards (hand).
     *
     * @param playerNickname the nickname of the player whose board needs to be updated.
     * @param card           the PlayCard object representing the new card to put in the player's hand.
     * @param index the index of the player's hand that needs to be updated
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setPlayersCard(String playerNickname, PlayCard card, int index) throws RemoteException {
        view.forwardMessage(new PlayersHandUpdateMessage(playerNickname, card, index));
    }

    /**
     * Asynchronously sets one of the visible cards for the game that is currently
     * being played by the local player.
     *
     * @param card  the PlayCard object representing the new visible card.
     * @param index the index of the visible card to change.
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setVisibleCard(PlayCard card, int index) throws RemoteException {
        view.forwardMessage(new VisibleCardUpdateMessage(card, index));
    }

    /**
     * Asynchronously sets one of the deck's top card resource for the game that is
     * currently being played by the local player.
     *
     * @param resource the Resource object representing the resource on the back of the card on top of the deck.
     * @param index    the deckID that identify the deck that needs to be updated.
     * @throws RemoteException if an error occurs during remote communication
     */
    @Override
    public void setDeckTopResource(Resource resource, int index) throws RemoteException {
        view.forwardMessage(new DeckUpdateMessage(resource, index));
    }

    @Override
    public void placeCardOnPlayersBoard(String playerNickName, CardSlot cardSlot, CardLocation location) throws RemoteException {
        view.forwardMessage(new PlayersBoardUpdateMessage(playerNickName, cardSlot, location));
    }

    @Override
    public void updateGameList(Set<String> availableGames) throws RemoteException {
        view.forwardMessage(new GameListMessage(availableGames));
    }

    @Override
    public void confirmJoin(String nickname, ClientGameSaving savings) throws RemoteException {
        view.forwardMessage(new JoinConfirmationMessage(nickname, savings));
    }

    @Override
    public void updatePlayersList(String[] nicknames, PlayerColor[] colors) throws RemoteException {
        view.forwardMessage(new PlayersListUpdateMessage(nicknames, colors));
    }

    @Override
    public void updateGameStatus(GameStatus gameStatus, TurnStatus turnStatus, String playersTurn) throws RemoteException {
        view.forwardMessage(new GameStatusUpdateMessage(gameStatus, turnStatus, playersTurn));
    }

    @Override
    public void reportError(RuntimeException exception) throws RemoteException {
        view.forwardMessage(new ServerErrorMessage(exception));
    }

    @Override
    public void updateScore(ScoreBoard scoreBoard) throws RemoteException {
        view.forwardMessage(new ScoreUpdateMessage(scoreBoard));
    }

    @Override
    public void ping(boolean isAnswer) throws RemoteException {
        view.forwardMessage(new ServerToClientPingMessage(isAnswer));
    }

    @Override
    public void sendChatMsg(ChatMessage chatMessage, boolean isPrivate) throws RemoteException {
        view.forwardMessage(new ServerChatMsgMessage(chatMessage, isPrivate));
    }
}
